#!/bin/bash
################################################################################
# zmbackup - Bash script to hot backup and hot restore Zimbra Collaboration
#            Suite Opensource
#
# Copyright (C) 2017 Lucas Costa Beyeler <lucas.costab@outlook.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public
# License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
################################################################################
# zmbkpose:
#
# 26/10/2010 - Version 1.0.5 - By Alan Nikitiuk Milani
#                              <alan.milani@4linux.com.br>
#                              <niki.milani@gmail.com>
#
#                              Bruno Gurgel
#                              <bruno@4linux.com.br>
#                              <bruno.gurgel@gmail.com>
#
# 24/05/2012 - Version 2.0 Beta - By William Felipe Welter
#                                 <william.welter@4linux.com.br>
#                                 <wfelipew@gmail.com>
################################################################################
# zmbackup:
#
# 29/01/2017 - Version 1.0 - By Lucas Costa Beyeler
#                               <lucas.beyeler@4linux.com.br>
#                               <lucas.costab@outlook.com>
################################################################################

################################################################################
# SET INTERNAL VARIABLE
################################################################################
DLOBJECT="(objectclass=zimbraDistributionList)"
ACOBJECT="(objectclass=zimbraAccount)"
SESSAO="distlist-"$(date  +%Y%m%d%H%M%S)
TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
TEMPSESSION=$(mktemp)
TEMPACCOUNT=$(mktemp)
MAILHOST="localhost"
source /etc/zmbkpose/zmbkpose.conf
################################################################################

# show_help: It will show a quick help about each command from zmbackup
show_help (){
  printf "Usage: zmbackup [-f|-i] [options] <mail>"
  printf "\n       zmbackup [-r] [options] <mail_origin> <mail_destination> <session>"
  printf "\n       zmbackup [-d] [options] <mail> <session> <time> <days|weeks|months>"

  # All the basic options will be put here.
  printf "\nOptions:\n"

  printf "\n -f, --full              : Execute full backup of an account, a list of accounts, or all accounts.
                           For all accounts, use the key word 'ALL' instead of a user mail."
  printf "\n -i, --incremental       : Execute incremental backup for an account, a list of accounts, or all accounts.
                           For all accounts, use the key word 'ALL' instead of a user mail."
  printf "\n -l, --list              : List all backup sessions that still exist in your disk."
  printf "\n -r, --restore           : Restore the backup inside the users account."
  printf "\n -d, --delete            : Delete a period of backup from an account, a list of accounts, or all accounts.
                           For all accounts, use the key word 'ALL' instead of a user mail."

  # All the options related to Full Backups will be put here
  printf "\nFull Backup Options:\n"

  printf "\n -dl, --distributionlist : Execute a backup of a distributionlist instead of an account."
  printf "\n -rs, --resources        : Execute a backup of a resource instead of an account."
  printf "\n -ldp, --ldap            : Execute a backup of an account, a list of accounts, or all accounts, but
                           only the ldap entry."

  # All the options related to Restore Backups will be put here
  printf "\nRestore Backup Options:\n"

  printf "\n -dl, --distributionlist : Execute a restore of a distributionlist instead of an account."
  printf "\n -rs, --resources        : Execute a restore of a resource instead of an account."
  printf "\n -m, --mail              : Execute a restore of an account, a list of accounts, or all accounts, but
                           only the messages."
  printf "\n -ldp, --ldap            : Execute a restore of an account, a list of accounts, or all accounts, but
                           only the ldap entry."
  printf "\n-ro, --restoreOnAccount  : Execute a restore of an account inside another account."

  # All the options related to Delete Backups will be put here
  printf "\nDelete Backup Options:\n"

  printf "\n -dl, --distributionlist : Delete a distributionlist instead of an account."
  printf "\n -rs, --resources        : Delete a resource instead of an account."
  printf "\n -m, --mail              : Delete an account, a list of accounts, or all accounts, but only the messages."
  printf "\n -ldp, --ldap            : Delete an account, a list of accounts, or all accounts, but only the ldap entry."

  printf "\n\n\n"
}

# Function to notify when the backup process began through e-mail
notify_email_begin()
{
  echo "Subject: Backup $1 begin at $(date)" >> /tmp/mail.txt
  echo "This e-mail is just to inform you that the backup process that you \
        scheduled already begin." >> /tmp/mail.txt
  echo "Depending the quantity of accounts you have, this process can last \
        hours or days." >> /tmp/mail.txt
  echo "Don't worry, we will inform you when the process finish."
  echo "Zmbackup Team" >> /tmp/mail.txt
  sendmail $EMAIL_NOTIFY < /tmp/mail.txt
  rm /tmp/mail.txt
}

# Function to notify when the backup process finish and the status through e-mail
notify_email_finish()
{
  if [ $1 == "OK" ]; then
    total=$(du -h $WORKDIR/$session | awk {'print $1'});
    echo "Subject: Backup $2 complete at $(date)" >> /tmp/mail.txt
    echo "This e-mail is just to inform you that the backup process that you \
          scheduled already finish with the status SUCCESS." >> /tmp/mail.txt
    echo -e "\r\nTotal: $total " >> /tmp/mail.txt
    echo "" >> /tmp/mail.txt
    echo "Regards," >> /tmp/mail.txt
    echo "Zmbackup Team" >> /tmp/mail.txt
    echo ""
    echo "Summary of files:" >> /tmp/mail.txt
    cat /tmp/$session >> /tmp/mail.txt
  else
    echo "Subject: Backup $2 complete at $(date)" >> /tmp/mail.txt
    echo "This e-mail is just to inform you that the backup process that you \
          scheduled already finish with the status FAILURE." >> /tmp/mail.txt
    echo "Check and correct what is preventing the backup before the next run."
    echo "" >> /tmp/mail.txt
    echo "Regards," >> /tmp/mail.txt
    echo "Zmbackup Team" >> /tmp/mail.txt
    echo ""
    echo "Summary of files:" >> /tmp/mail.txt
    cat /tmp/$session >> /tmp/mail.txt
  fi
  sendmail $EMAIL_NOTIFY < /tmp/mail.txt
  rm /tmp/mail.txt
}

# Search the LDAP for all accounts and backup an account inside a LDIFF file.
# Parameters:
# $1 -> Inform the LDAP query to search;
ldap_bkp()
{
  if [ -z $2 ]; then
    ldapsearch -x -H $LDAPSERVER \
                  -D $LDAPADMIN \
                  -w $LDAPPASS \
                  -b '' \
                  -LLL "$1" mail | \
                  grep ^mail | \
                  awk '{print $2}' > $TEMPACCOUNT
  else
    for i in $(echo "$2" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  fi
  if [ $? -eq 0 ]; then
    cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
                              "ldapsearch -x -H $LDAPSERVER \
                                             -D $LDAPADMIN \
                                             -w $LDAPPASS \
                                             -b '' \
                                             -LLL '(&(mail={})$1)' > $TEMPDIR/{}.ldiff"
  else
    notify_email_finish "NOK" $SESSION
    exit 1
  fi
}

# Backup all the distribution lists and the accounts associated to them
backup_dl()
{
  SESSION="distlist-"$(date  +%Y%m%d%H%M%S)
  notify_email_begin $SESSION
  echo "SESSAO: $SESSAO started on $(date)" >> $TEMPSESSION
  ldap_bkp $DLOBJECT
  mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
  echo "SESSAO: $SESSAO concluÃ­da em $(date)" >> $TEMPSESSION
  cat $TEMPSESSION >> $WORKDIR/sessions.txt && rm -f "$TEMPSESSION"
  echo "$(date) - Backup completed for $COUNT lists" >> $LOGFILE
  notify_email_finish "OK" $SESSION
}

# Backup all the accounts - PARALLEL_SUPPORT
backup_full()
{
  SESSION="full-"$(date  +%Y%m%d%H%M%S)
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  if [ -z $1 ]; then
    ldap_bkp $ACOBJECT
  else
    ldap_bkp $ACOBJECT $1
  fi
  notify_email_begin $SESSION
  cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
           "wget -O $TEMPDIR/{}.tgz \
                 --http-user $ADMINUSER \
                 --http-passwd $ADMINPASS \
                 https://$MAILHOST:7071/home/{}/?fmt=tgz \
                 --no-check-certificate > /dev/null && \
            echo $SESSION:{}:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt"
  mv "$TEMPDIR" "$WORKDIR/$SESSION" && rm -rf "$TEMPDIR"
  echo "SESSION: $SESSION completed in $(date)" >> $WORKDIR/sessions.txt
  notify_email "FULL" $SESSION
  notify_email_finish "OK" $SESSION
  echo "$(date) - Backup completed for $COUNT account(s)" >> $LOGFILE
  exit 0
}


# Backup all the accounts - PARALLEL_SUPPORT
backup_incremental()
{

  #Check if exist a backup full. If not, do a backup full and not the incremental
  FULLSESSIONLABEL=$(grep "SESSION: full-" $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
  if ! [[ -z "$FULLSESSIONLABEL" && -d "$WORKDIR/$FULLSESSIONLABEL" ]]; then
    if [ -z $1 ]; then
      backup_full
    else
      backup_full $1
    fi
    exit
  fi

  INCFROM=$(grep INCFROM: $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
  SESSION="inc-"$(date  +%Y%m%d%H%M%S)
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  if [ -z $1 ]; then
    ldap_bkp $ACOBJECT
  else
    ldap_bkp $ACOBJECT $1
  fi
  notify_email_begin $SESSION
  cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
           "wget -O $TEMPDIR/{}.tgz \
                 --http-user $ADMINUSER \
                 --http-passwd $ADMINPASS \
                 https://$MAILHOST:7071/home/{}/?fmt=tgz&query=after:$INCFROM\
                 --no-check-certificate > /dev/null && \
            echo $SESSION:{}:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt"
  mv "$TEMPDIR" "$WORKDIR/$SESSION" && rm -rf "$TEMPDIR"
  echo "SESSION: $SESSION completed in $(date)" >> $WORKDIR/sessions.txt
  notify_email "INCREMENTAL" $SESSION
  notify_email_finish "OK" $SESSION
  echo "$(date) - Backup completed for $COUNT account(s)" >> $LOGFILE
  exit 0
}

list_sessions ()
{
  for i in $(egrep 'SESSION:' $WORKDIR/sessions.txt | egrep 'started' |  awk '{print $2}' | sort | uniq); do
    SIZE=$(du -h $WORKDIR/$i | awk {'print $1'})
    OPT=$(echo $i | cut -d"-" -f1 )
    printf "\nSession: $i\n    Size: $SIZE"
    case $OPT in
      "full") printf "\n    Type: Full Backup"
      ;;
      "inc") printf "\n    Type: Incremental Backup"
      ;;
      "distlist") printf "\n    Type: Distribution List Backup\n"
      ;;
    esac
}

build_restore_list()
{
  INBETWEEN=0
  if [[ *"@"* == $1 ]]; then
    for i in $(echo "$1" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  else
    grep $2 $WORKDIR/sessions.txt | tail -1 | awk '{print $2}' > $TEMPACCOUNT
  fi
  if [[ "full-"* == $2 ]]; then
    for i in $(egrep 'SESSION:' $WORKDIR/sessions.txt | egrep 'started' |  awk '{print $2}' | sort | uniq); do
      if [[ $2 ==  $i ]]; then
        echo $i >> $TEMPSESSION
        INBETWEEN=1
      fi
      if [[ $INBETWEEN -eq 1  && "inc-"* == $i ]]; then
        echo $i >> $TEMPSESSION
      else
        break
      fi
    done
  else
    echo $2 >> $TEMPSESSION
  fi  
}

restore_accounts_mail ()
{
  build_restore_list $1 $2
  if ! [ -s $TEMPSESSION ]; then
    echo "No backup found. Impossible to restore"
  else
    echo "Restore mail process started at - $(date)"
    for i in $TEMPSESSION:
      echo "Restoring Session - $i"
      if [ -z $3 ]; then
        cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
                 "curl -k --data-binary @$WORKDIR/$i/{}.tgz
                       -u $ADMINUSER:$ADMINPASS
                       https://$MAILHOST:7071/home/$3/?fmt=tgz"
      else
        cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
                 "curl -k --data-binary @$WORKDIR/$i/{}.tgz
                       -u $ADMINUSER:$ADMINPASS
                       https://$MAILHOST:7071/home/{}/?fmt=tgz"
      echo "Session $i restored with SUCCESS"
    echo "Restore mail process completed at - $(date)"
}

restore_accounts_ldap ()
{
  build_restore_list $1 $2
  if ! [ -s $TEMPSESSION ]; then
    echo "No backup found. Impossible to restore"
  else
    echo "Restore LDAP process started at - $(date)"
    for i in $TEMPSESSION:
      echo "Restoring Session - $i"
      cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
               "ldapdelete -r -x -H $LDAPSERVER -D $LDAPADMIN -c
                           -w $LDAPPASS
                           $(grep ^dn: $WORKDIR/$i/{}.ldiff \
                           | awk '{print $2}') 2>/dev/null"
       cat $TEMPACCOUNT | parallel --jobs $MAX_PARALLEL_PROCESS \
                "ldapadd -x -H $LDAPSERVER -D $LDAPADMIN
                         -c -w $LDAPPASS -f $WORKDIR/$i/{}.ldiff"
      echo "Session $i restored with SUCCESS"
    echo "Restore LDAP process completed at - $(date)"
}
