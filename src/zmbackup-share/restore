#!/bin/bash
################################################################################
# zmbackup - Bash script to hot backup and hot restore Zimbra Collaboration
#            Suite Opensource
#
# Copyright (C) 2017 Lucas Costa Beyeler <lucas.costab@outlook.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public
# License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
################################################################################
# backup:
#
# 24/03/2017 - Version 1.1.0 -  By Lucas Costa Beyeler
#                               <lucas.beyeler@4linux.com.br>
#                               <lucas.costab@outlook.com>
################################################################################
# parallel:
#
#   O. Tange (2011): GNU Parallel - The Command-Line Power Tool,
#  ;login: The USENIX Magazine, February 2011:42-47.
#
################################################################################
build_restore_list()
{
  INBETWEEN=0
  if [[ $2 == *"@"* ]]; then
    for i in $(echo "$2" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  else
    grep $1 /backup/sessions.txt | grep -v "SESSION" | cut -d: -f2 > $TEMPACCOUNT
  fi
  if [[ "$1" == "full-"* ]]; then
    for i in $(egrep 'SESSION:' $WORKDIR/sessions.txt | egrep 'started' |  awk '{print $2}' | sort | uniq); do
      if [[ "$1" ==  "$i" ]]; then
        echo $i >> $TEMPSESSION
        INBETWEEN=1
      elif [[ "$INBETWEEN" -eq 1 ]] && [[ "$i" == "inc-"* ]]; then
        echo $i >> $TEMPSESSION
      else
        break
      fi
    done
  else
    echo $1 >> $TEMPSESSION
  fi
}

restore_accounts_mail ()
{
  build_restore_list $1 $2
  if ! [ -s $TEMPSESSION ]; then
    echo "No backup found. Impossible to restore"
  else
    echo "Restore mail process started at - $(date)"
    for i in $(cat $TEMPSESSION); do
      printf "\nRestoring Session - $i"
      if ! [ -z $3 ]; then
        cat $TEMPACCOUNT | parallel --no-notice --jobs $MAX_PARALLEL_PROCESS \
                 "curl --silent -k --data-binary @$WORKDIR/$i/{}.tgz \
                       -u $ADMINUSER:$ADMINPASS \
                       https://$MAILHOST:7071/home/$3/?fmt=tgz > /dev/null"
      else
        cat $TEMPACCOUNT | parallel --no-notice --jobs $MAX_PARALLEL_PROCESS \
                 "curl --silent -k --data-binary @$WORKDIR/$i/{}.tgz \
                       -u $ADMINUSER:$ADMINPASS \
                       https://$MAILHOST:7071/home/{}/?fmt=tgz > /dev/null"
      fi
      printf "\nSession $i restored with SUCCESS\n"
    done
    printf "\nRestore mail process completed at - $(date)\n"
  fi
}

loop_ldap()
{
  source /etc/zmbackup/zmbackup.conf
  source /opt/zimbra/.bashrc
  ldapdelete -r -x -H $LDAPSERVER -D $LDAPADMIN -c \
              -w $LDAPPASS \
              $(grep ^dn: $WORKDIR/$1/$2.ldiff \
              | awk '{print $2}') > /dev/null 2>&1
  ldapadd -x -H $LDAPSERVER -D $LDAPADMIN \
           -c -w $LDAPPASS -f $WORKDIR/$1/$2.ldiff > /dev/null 2>&1
}


restore_accounts_ldap ()
{
  build_restore_list $1 $2
  if ! [ -s $TEMPSESSION ]; then
    echo "No backup found. Impossible to restore"
  else
    echo "Restore LDAP process started at - $(date)"
    export -f loop_ldap
    for i in $(cat $TEMPSESSION); do
      echo "Restoring Session - $i"
      cat $TEMPACCOUNT | parallel --no-notice --jobs $MAX_PARALLEL_PROCESS \
                                "loop_ldap $i {}"
      echo "Session $i restored with SUCCESS"
    done
    echo "Restore LDAP process completed at - $(date)"
  fi
}

rotate_backup()
{
  cp $WORKDIR/sessions.txt $WORKDIR/sessions.txt.old
  SESSION=$(grep $1 $WORKDIR/sessions.txt -m 1 | awk '{print $2}')
  if [ "$SESSION" == "$1" ]; then
    rm -rf $WORKDIR/"$1"
    echo Removing session "$1"
    grep -v "$1" $WORKDIR/sessions.txt > $WORKDIR/.sessions.txt
    mv $WORKDIR/.sessions.txt $WORKDIR/sessions.txt
  fi
  rm $WORKDIR/.sessions.txt -f
  rm $WORKDIR/sessions.txt.old -f
}
