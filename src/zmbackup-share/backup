#!/bin/bash
################################################################################
# zmbackup - Bash script to hot backup and hot restore Zimbra Collaboration
#            Suite Opensource
#
# Copyright (C) 2017 Lucas Costa Beyeler <lucas.costab@outlook.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public
# License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
################################################################################
# backup:
#
# 24/03/2017 - Version 1.1.0 -  By Lucas Costa Beyeler
#                               <lucas.beyeler@4linux.com.br>
#                               <lucas.costab@outlook.com>
################################################################################
# parallel:
#
#   O. Tange (2011): GNU Parallel - The Command-Line Power Tool,
#  ;login: The USENIX Magazine, February 2011:42-47.
#
################################################################################
# CHECK IF THE ZMBACKUP.CONF IS CONFIGURED CORRECTLY
################################################################################

# Search the LDAP for all accounts.
# Parameters:
# $1 -> Inform the LDAP query to search;
# $2 -> Inform the LDAP object to filter;
function build_list()
{
  ldapsearch -x -H $LDAPSERVER \
                -D $LDAPADMIN \
                -w $LDAPPASS \
                -b '' \
                -LLL "$1" $2 | \
                grep "^$2" | \
                awk '{print $2}' > $TEMPINCACCOUNT
  for i in $(cat $TEMPINCACCOUNT); do
    EXIST=$(grep $i $WORKDIR/sessions.txt 2> /dev/null | tail -1 | awk -F: '{print $3}')
    if  [[ "$i" != "galsync."* ]] && \
        [[ "$i" != "virus-"* ]] && \
        [[ "$i" != "ham."* ]] && \
        [[ "$i" != "admin@"* ]] && \
        [[ "$i" != "spam."* ]] && \
        [[ "$i" != "zmbackup@"* ]] && \
        [[ "$i" != "postmaster@"* ]] && \
        [[ "$i" != "root@"* ]]; then
      if [ "$EXIST" = "$(date +%m/%d/%y)" ]; then
        echo "WARN: $i already has backup today. Nothing to do."
      else
        echo $i >> $TEMPACCOUNT
      fi
    fi
  done
}

loop_ldap()
{
  ldapsearch -x -H $LDAPSERVER -D $LDAPADMIN -w $LDAPPASS -b '' \
             -LLL '(&(|(mail=$1)(uid=$1))$2)' > $TEMPDIR/{}.ldiff
  echo $SESSION:{}:$(date +%m/%d/%y) >> $TEMPSESSION

}

# Backup all the distribution lists and the accounts associated to them
backup_dl()
{
  export -f loop_ldap
  SESSION="distlist-"$(date  +%Y%m%d%H%M%S)
  notify_email_begin $SESSION
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  if [ -z $1 ]; then
    build_list $DLOBJECT $DLFILTER
  else
    for i in $(echo "$1" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  fi
  cat $TEMPACCOUNT | parallel --no-notice --env --jobs $MAX_PARALLEL_PROCESS \
                              "loop_ldap {} $DLOBJECT"
  echo "SESSION: $SESSION completed in $(date)" >> $TEMPSESSION
  mv "$TEMPDIR" "$WORKDIR/$SESSION" && rm -rf "$TEMPDIR"
  cat $TEMPSESSION >> $WORKDIR/sessions.txt
  echo "$(date) - Backup completed for all lists" >> $LOGFILE
  notify_email_finish "OK" $SESSION
}

# Backup all the alias
backup_alias()
{
  export -f loop_ldap
  SESSION="alias-"$(date  +%Y%m%d%H%M%S)
  notify_email_begin $SESSION
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  if [ -z $1 ]; then
    build_list $ALOBJECT $ALFILTER
  else
    for i in $(echo "$1" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  fi
  cat $TEMPACCOUNT | parallel --no-notice --env --jobs $MAX_PARALLEL_PROCESS \
                              "loop_ldap {} $ALOBJECT"
  echo "SESSION: $SESSION completed in $(date)" >> $TEMPSESSION
  mv "$TEMPDIR" "$WORKDIR/$SESSION" && rm -rf "$TEMPDIR"
  cat $TEMPSESSION >> $WORKDIR/sessions.txt
  echo "$(date) - Backup completed for all alias" >> $LOGFILE
  notify_email_finish "OK" $SESSION
}

loop_mbldp()
{
  if [ $3 == "INC"]; then
    AFTER="\&query=after:"$(grep $1 $WORKDIR/sessions.txt | tail -1 | awk -F: '{print $3}')
  fi
  ldapsearch -x -H $LDAPSERVER -D $LDAPADMIN -w $LDAPPASS -b '' \
             -LLL '(&(|(mail=$1)(uid=$1))$2)' > $TEMPDIR/{}.ldiff
  wget --quiet -O $TEMPDIR/$1.tgz --http-user $ADMINUSER --http-passwd $ADMINPASS \
        "https://$MAILHOST:7071/home/$1/?fmt=tgz"$AFTER --no-check-certificate
  echo $SESSION:$1:$(date +%m/%d/%y) >> $TEMPSESSION
}

# Backup all the accounts - PARALLEL_SUPPORT
backup_full()
{
  export -f loop_mbldp
  SESSION="full-"$(date  +%Y%m%d%H%M%S)
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  notify_email_begin $SESSION
  if ! [ -z $1 ]; then
    build_list $ACOBJECT $ACFILTER
  else
    for i in $(echo "$1" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  fi
  cat $TEMPACCOUNT | parallel --no-notice --env --jobs $MAX_PARALLEL_PROCESS \
           "loop_mbldp {} $ACOBJECT"
  mv "$TEMPDIR" "$WORKDIR/$SESSION"
  echo "SESSION: $SESSION completed in $(date)" >> $TEMPSESSION
  cat "$TEMPSESSION" >> $WORKDIR/sessions.txt
  notify_email_finish "OK" $SESSION
  echo "$(date) - Backup completed for all accounts" >> $LOGFILE
}

# Backup all the accounts - PARALLEL_SUPPORT
backup_incremental()
{
  #Check if exist a backup full. If not, do a backup full and not the incremental
  FULLSESSIONLABEL=$(grep "SESSION: full-" $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
  if [[ -z "$FULLSESSIONLABEL" && -d "$WORKDIR/$FULLSESSIONLABEL" ]]; then
    backup_full $1
    exit
  fi
  export -f loop_mbldp
  export SESSION="inc-"$(date  +%Y%m%d%H%M%S)
  echo "SESSION: $SESSION started on $(date)" >> $TEMPSESSION
  notify_email_begin $SESSION
  if ! [ -z $1 ]; then
    build_list $ACOBJECT $ACFILTER
  else
    for i in $(echo "$1" | sed 's/,/\n/g'); do
      echo $i >> $TEMPACCOUNT
    done
  fi
  cat $TEMPACCOUNT | parallel --no-notice --env --jobs $MAX_PARALLEL_PROCESS \
           "loop_mbldp {} $ACOBJECT INC"
  mv "$TEMPDIR" "$WORKDIR/$SESSION"
  echo "SESSION: $SESSION completed in $(date)" >> $TEMPSESSION
  cat "$TEMPSESSION" >> $WORKDIR/sessions.txt
  notify_email_finish "OK" $SESSION
  echo "$(date) - Backup completed for all accounts" >> $LOGFILE
}
